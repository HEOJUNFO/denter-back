<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dentner.core.cmmn.mapper.MemberMapper">

	<select id="selectLoginMember" parameterType="String" resultType="com.dentner.core.cmmn.vo.TokenVo">
		SELECT
			MEMBER_NO, MEMBER_SE, MEMBER_EMAIL, MEMBER_PASSWORD, MEMBER_TP
		FROM 
			T_MEMBER
		WHERE
			MEMBER_EMAIL = #{value}
		  AND DELETED_AT = 'N'
	</select>

	<select id="selectLoginMemberId" parameterType="String" resultType="com.dentner.core.cmmn.vo.TokenVo">
		SELECT
		    MEMBER_NO, MEMBER_SE, MEMBER_EMAIL, MEMBER_PASSWORD, MEMBER_TP, MEMBER_NAME,
		    MEMBER_HP_NATION, MEMBER_HP, MEMBER_NICK_NAME, MEMBER_LICENSE_NUMBER, MEMBER_DENTISTRY_NAME,
		    MEMBER_BUSINESS_NUMBER, MEMBER_ADDRESS, MEMBER_DETAIL_ADDRESS, MEMBER_FIRST_NAME, LAST_LOGIN_DT,
		    MEMBER_LAST_NAME, MEMBER_ALARM_AT, MEMBER_ALARM_SE, MEMBER_BUSINESS_NAME, MEMBER_JOB_SE,
		    MEMBER_TIMEZONE_NO, MEMBER_APPROVAL_SE, REGISTER_DT, UPDATED_DT, UPDATED_NO, DELETED_DT, DELETED_AT
		FROM T_MEMBER
		WHERE
			MEMBER_EMAIL = #{value}
		AND DELETED_AT = 'N'
	</select>

	<select id="selectUserInfo" parameterType="String" resultType="com.dentner.core.cmmn.vo.MemberVo">
		WITH Refund AS (
			SELECT
				REQUEST_FORM_NO,
			SUM(ABS(MILEAGE_AMOUNT)) AS TOTAL_REFUND_AMOUNT
			FROM T_MILEAGE
			WHERE MILEAGE_SE = 'D'
			GROUP BY REQUEST_FORM_NO
		)
		SELECT DISTINCT
			A.MEMBER_NO, B.MEMBER_SE, A.MEMBER_EMAIL, A.MEMBER_PASSWORD, A.MEMBER_TP, A.MEMBER_NAME,
			A.MEMBER_HP_NATION, A.MEMBER_HP, B.MEMBER_NICK_NAME, A.MEMBER_LICENSE_NUMBER, A.MEMBER_DENTISTRY_NAME,
			A.MEMBER_BUSINESS_NUMBER, A.MEMBER_ADDRESS, A.MEMBER_DETAIL_ADDRESS, A.MEMBER_FIRST_NAME,
			A.MEMBER_LAST_NAME, A.MEMBER_ALARM_AT, A.MEMBER_ALARM_SE, A.MEMBER_BUSINESS_NAME, A.MEMBER_JOB_SE,
			IF((SELECT EE.MEMBER_BLACK_NO FROM T_MEMBER_BLACK EE WHERE EE.MEMBER_NO = A.MEMBER_NO), 'Y','N') AS BLACK_YN,
			(SELECT EE.REGISTER_DT FROM T_MEMBER_BLACK EE WHERE EE.MEMBER_NO = A.MEMBER_NO) AS BLACK_DT,
			A.MEMBER_TIMEZONE_NO, A.MEMBER_APPROVAL_SE, C.SW_NO, C.SW_ETC, A.REGISTER_DT, A.LAST_LOGIN_DT,
			(SELECT GROUP_CONCAT(CONCAT(CODE_NAME,'', IFNULL(CODE_DESC,''))) FROM T_CODE WHERE CODE_NO NOT IN(754) AND FIND_IN_SET(CODE_NO, (SELECT SW_NO FROM T_MEMBER_SW WHERE MEMBER_NO = A.MEMBER_NO))) AS SW_NO_NAME,
			(SELECT FILE_URL FROM T_FILE WHERE
			<if test="@com.dentner.core.util.MybatisUtils@equals('B',memberSe)">FILE_SE = 'L'</if>
			<if test="@com.dentner.core.util.MybatisUtils@equals('A',memberSe) ||
						@com.dentner.core.util.MybatisUtils@equals('C',memberSe)">FILE_SE = 'D'</if>
			AND FILE_FROM_NO = A.MEMBER_NO AND DELETED_AT = 'N' ORDER BY REGISTER_DT DESC LIMIT 1) AS MEMBER_PROFILE_IMAGE,
			(SELECT COUNT(*) FROM T_MEMBER_PROFILE WHERE MEMBER_NO = A.MEMBER_NO AND DELETED_AT = 'N') AS MULTI_PROFILE_CNT,
			FN_CODE_NM(A.MEMBER_HP_NATION, 'NAME') AS MEMBER_HP_NATION_NAME
			<if test="@com.dentner.core.util.MybatisUtils@equals('A',memberSe)">
				, (SELECT IFNULL(SUM(MILEAGE_AMOUNT),0) AS MILEAGE_AMOUNT FROM T_MILEAGE D WHERE D.DELETED_AT = 'N' AND D.REGISTER_NO = A.MEMBER_NO) AS MEMBER_MILEAGE
			</if>
			<if test="@com.dentner.core.util.MybatisUtils@isNotEquals('A',memberSe)">
				, ( SELECT IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN ABS(MILEAGE_AMOUNT) ELSE 0 END) - IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN R.TOTAL_REFUND_AMOUNT
					ELSE 0 END), 0), 0) AS mileageWon
					FROM T_MILEAGE U
					JOIN T_REQUEST_FORM Y ON U.REQUEST_FORM_NO = Y.REQUEST_FORM_NO
					JOIN T_MEMBER X ON Y.REQUEST_DESIGNER_NO = X.MEMBER_NO
					LEFT JOIN Refund R ON U.REQUEST_FORM_NO = R.REQUEST_FORM_NO
					WHERE U.MILEAGE_SE IN ('B', 'D')
					AND X.MEMBER_NO = A.MEMBER_NO
					AND U.CALCULATE_SE = 'N'
					AND Y.REQUEST_STATUS IN ('D', 'E')) AS MEMBER_MILEAGE
			</if>
		FROM T_MEMBER A
		JOIN T_MEMBER_PROFILE B ON A.MEMBER_NO = B.MEMBER_NO AND B.MEMBER_SE = #{memberSe}
		LEFT JOIN T_MEMBER_SW C ON A.MEMBER_NO  = C.MEMBER_NO
		WHERE 1=1
		  AND A.MEMBER_EMAIL = #{memberId}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectUserEmail" parameterType="String" resultType="int">
		SELECT
			COUNT(*)
		FROM
			T_MEMBER
		WHERE
			MEMBER_EMAIL = #{value}
		AND DELETED_AT = 'N'
	</select>

	<insert id="insertPasswordReset">
		INSERT INTO T_PASSWORD_RESET
		    (
				  EMAIL
				, TOKEN_VALUE
			) VALUES (
				  #{email}
				, #{tokenValue}
			)
	</insert>

	<select id="selectResetPassword" resultType="int">
		SELECT
			COUNT(*)
		FROM
			T_PASSWORD_RESET
		WHERE
			EMAIL = #{email}
		 AND TOKEN_VALUE = #{token}
		 AND TIMESTAMPDIFF(MINUTE, CREATED_AT, NOW()) <![CDATA[<]]> 30
	</select>

	<update id="updateResetPassword">
		UPDATE T_MEMBER
		SET
		      MEMBER_PASSWORD = #{password}
			, UPDATED_AT = NOW()
		WHERE MEMBER_EMAIL = #{email}
	</update>

	<delete id="deleteResetPassword">
		DELETE FROM T_PASSWORD_RESET
		WHERE EMAIL = #{email}
	</delete>

	<select id="selectUserPhone" resultType="int">
		SELECT
			COUNT(*)
		FROM
			T_MEMBER
		WHERE
		    1=1
		AND MEMBER_CONTACT1 = #{phone} AND MEMBER_CONTACT1_NATION = #{contactNationCode}
		AND DELETED_AT = 'N'
	</select>

	<insert id="insertAuthCode">
		INSERT INTO T_AUTH_CODE
			(
		  		  AUTH_CODE
				, TOKEN_VALUE
				, PHONE_NO
				, MEMBER_CONTACT_NATION
			) VALUES (
				  #{authCode}
				, #{tokenValue}
				, #{phoneNo}
				, #{contactNationCode}
			)
	</insert>

	<select id="selectAuthPhone" resultType="com.dentner.core.cmmn.vo.PhoneVo">
		SELECT
			PHONE_NO AS PHONE, MEMBER_CONTACT_NATION AS CONTACT_NATION_CODE
		FROM
			T_AUTH_CODE
		WHERE
			AUTH_CODE = #{authCode}
		  AND TOKEN_VALUE = #{token}
		  AND TIMESTAMPDIFF(MINUTE, CREATED_AT, NOW()) <![CDATA[<]]> 5
	</select>

	<select id="selectUserInfoPhone" resultType="com.dentner.core.cmmn.vo.MemberVo">
		SELECT
			MEMBER_EMAIL
		FROM T_MEMBER A
		WHERE 1=1
		  AND MEMBER_CONTACT1 = #{phone} AND MEMBER_CONTACT1_NATION = #{contactNationCode}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectNationCode" resultType="String">
		SELECT
			FN_CODE_NM(#{contactNationCode}, 'NAME') AS MEMBER_CONTACT2_NATION_NAME
	</select>

	<select id="selectIsSnsLogin">
		SELECT COUNT(*) AS CNT
		FROM T_SOCIAL
		WHERE SOCIAL_UNIQUE_KEY = #{uniqueKey}
		  AND SOCIAL_SE = #{socialSe}
	</select>

	<select id="selectUserBySocial" resultType="com.dentner.core.cmmn.vo.TokenVo">
		SELECT DISTINCT
			A.MEMBER_NO, A.MEMBER_SE, A.MEMBER_EMAIL, A.MEMBER_PASSWORD, A.MEMBER_TP, A.MEMBER_NAME,
			A.MEMBER_HP_NATION, A.MEMBER_HP, A.MEMBER_NICK_NAME, A.MEMBER_LICENSE_NUMBER, A.MEMBER_DENTISTRY_NAME,
			A.MEMBER_BUSINESS_NUMBER, A.MEMBER_ADDRESS, A.MEMBER_DETAIL_ADDRESS, A.MEMBER_FIRST_NAME,
			A.MEMBER_LAST_NAME, A.MEMBER_ALARM_AT, A.MEMBER_ALARM_SE, A.MEMBER_BUSINESS_NAME, A.MEMBER_JOB_SE,
			A.MEMBER_TIMEZONE_NO, A.MEMBER_APPROVAL_SE, A.REGISTER_DT, A.LAST_LOGIN_DT,
			(SELECT IFNULL(SUM(MILEAGE_AMOUNT),0) AS MILEAGE_AMOUNT FROM T_MILEAGE D WHERE D.DELETED_AT = 'N' AND D.REGISTER_NO = A.MEMBER_NO) AS MEMBER_MILEAGE
		FROM T_MEMBER A
		JOIN T_SOCIAL B ON A.MEMBER_NO = B.MEMBER_NO
		WHERE 1=1
		  AND A.MEMBER_NO = B.MEMBER_NO
		  AND B.SOCIAL_SE = #{socialSe}
		  AND B.SOCIAL_UNIQUE_KEY = #{uniqueKey}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectUserSocialInfo" resultType="com.dentner.core.cmmn.vo.MemberVo">
		WITH Refund AS (
			SELECT
				REQUEST_FORM_NO,
				SUM(ABS(MILEAGE_AMOUNT)) AS TOTAL_REFUND_AMOUNT
			FROM T_MILEAGE
			WHERE MILEAGE_SE = 'D'
			GROUP BY REQUEST_FORM_NO
		)
		SELECT DISTINCT
			A.MEMBER_NO, A.MEMBER_SE, A.MEMBER_EMAIL, A.MEMBER_PASSWORD, A.MEMBER_TP, A.MEMBER_NAME,
			A.MEMBER_HP_NATION, A.MEMBER_HP, D.MEMBER_NICK_NAME, A.MEMBER_LICENSE_NUMBER, A.MEMBER_DENTISTRY_NAME,
			A.MEMBER_BUSINESS_NUMBER, A.MEMBER_ADDRESS, A.MEMBER_DETAIL_ADDRESS, A.MEMBER_FIRST_NAME,
			A.MEMBER_LAST_NAME, A.MEMBER_ALARM_AT, A.MEMBER_ALARM_SE, A.MEMBER_BUSINESS_NAME, A.MEMBER_JOB_SE,
			A.MEMBER_TIMEZONE_NO, A.MEMBER_APPROVAL_SE, A.REGISTER_DT, B.SOCIAL_SE,
			C.SW_NO, C.SW_ETC,
			(SELECT GROUP_CONCAT(CONCAT(CODE_NAME,'', IFNULL(CODE_DESC,''))) FROM T_CODE WHERE CODE_NO NOT IN(754) AND FIND_IN_SET(CODE_NO, (SELECT SW_NO FROM T_MEMBER_SW WHERE MEMBER_NO = A.MEMBER_NO))) AS SW_NO_NAME,
			(SELECT FILE_URL FROM T_FILE WHERE FILE_SE = 'D' AND FILE_FROM_NO = A.MEMBER_NO AND DELETED_AT = 'N') AS MEMBER_PROFILE_IMAGE,
			IF((SELECT EE.MEMBER_BLACK_NO FROM T_MEMBER_BLACK EE WHERE EE.MEMBER_NO = A.MEMBER_NO), 'Y','N') AS BLACK_YN,
			(SELECT EE.REGISTER_DT FROM T_MEMBER_BLACK EE WHERE EE.MEMBER_NO = A.MEMBER_NO) AS BLACK_DT,
			FN_CODE_NM(A.MEMBER_HP_NATION, 'NAME') AS MEMBER_HP_NATION_NAME, A.REGISTER_DT, A.LAST_LOGIN_DT
			<if test="@com.dentner.core.util.MybatisUtils@equals('A',memberSe)">
				, (SELECT IFNULL(SUM(MILEAGE_AMOUNT),0) AS MILEAGE_AMOUNT FROM T_MILEAGE D WHERE D.DELETED_AT = 'N' AND D.REGISTER_NO = A.MEMBER_NO) AS MEMBER_MILEAGE
			</if>
			<if test="@com.dentner.core.util.MybatisUtils@isNotEquals('A',memberSe)">
				, ( SELECT IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN ABS(MILEAGE_AMOUNT) ELSE 0 END) - IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN R.TOTAL_REFUND_AMOUNT
					ELSE 0 END), 0), 0) AS mileageWon
					FROM T_MILEAGE U
					JOIN T_REQUEST_FORM Y ON U.REQUEST_FORM_NO = Y.REQUEST_FORM_NO
					JOIN T_MEMBER X ON Y.REQUEST_DESIGNER_NO = X.MEMBER_NO
					LEFT JOIN Refund R ON U.REQUEST_FORM_NO = R.REQUEST_FORM_NO
					WHERE U.MILEAGE_SE IN ('B', 'D')
					  AND X.MEMBER_NO = A.MEMBER_NO
					  AND U.CALCULATE_SE = 'N'
					  AND Y.REQUEST_STATUS IN ('D', 'E')) AS MEMBER_MILEAGE
			</if>
		FROM T_MEMBER A
		JOIN T_SOCIAL B ON A.MEMBER_NO = B.MEMBER_NO
		JOIN T_MEMBER_PROFILE D ON A.MEMBER_NO = D.MEMBER_NO AND D.MEMBER_SE = #{memberSe}
		LEFT JOIN T_MEMBER_SW C ON A.MEMBER_NO  = C.MEMBER_NO
		WHERE 1=1
		  AND B.SOCIAL_SE = #{socialSe}
		  AND B.SOCIAL_UNIQUE_KEY = #{uniqueKey}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectMultiProfileCnt" resultType="int">
		SELECT
			COUNT(*) AS CNT
		FROM T_MEMBER_PROFILE A
		WHERE 1=1
		  AND A.MEMBER_NO = #{memberNo}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectUserInfoNo" resultType="com.dentner.core.cmmn.vo.MemberVo">
		WITH Refund AS (
			SELECT
				REQUEST_FORM_NO,
				SUM(ABS(MILEAGE_AMOUNT)) AS TOTAL_REFUND_AMOUNT
			FROM T_MILEAGE
			WHERE MILEAGE_SE = 'D'
			GROUP BY REQUEST_FORM_NO
		)
		SELECT DISTINCT
			A.MEMBER_NO, B.MEMBER_SE, A.MEMBER_EMAIL, A.MEMBER_PASSWORD, A.MEMBER_TP, A.MEMBER_NAME,
			A.MEMBER_HP_NATION, A.MEMBER_HP, B.MEMBER_NICK_NAME, A.MEMBER_LICENSE_NUMBER, A.MEMBER_DENTISTRY_NAME,
			A.MEMBER_BUSINESS_NUMBER, A.MEMBER_ADDRESS, A.MEMBER_DETAIL_ADDRESS, A.MEMBER_FIRST_NAME,
			A.MEMBER_LAST_NAME, A.MEMBER_ALARM_AT, A.MEMBER_ALARM_SE, A.MEMBER_BUSINESS_NAME, A.MEMBER_JOB_SE,
			A.MEMBER_TIMEZONE_NO, A.MEMBER_APPROVAL_SE, C.SW_NO, C.SW_ETC, A.LAST_LOGIN_DT,
			(SELECT GROUP_CONCAT(CONCAT(CODE_NAME,'', IFNULL(CODE_DESC,''))) FROM T_CODE WHERE CODE_NO NOT IN(754) AND FIND_IN_SET(CODE_NO, (SELECT SW_NO FROM T_MEMBER_SW WHERE MEMBER_NO = A.MEMBER_NO))) AS SW_NO_NAME,
			(SELECT FILE_URL FROM T_FILE WHERE
			<if test="@com.dentner.core.util.MybatisUtils@equals('B',memberSe)">FILE_SE = 'L'</if>
			<if test="@com.dentner.core.util.MybatisUtils@equals('A',memberSe) ||
						@com.dentner.core.util.MybatisUtils@equals('C',memberSe)">FILE_SE = 'D'</if>
			AND FILE_FROM_NO = B.MEMBER_NO AND DELETED_AT = 'N' ORDER BY REGISTER_DT DESC LIMIT 1) AS MEMBER_PROFILE_IMAGE,
			(SELECT COUNT(*) FROM T_MEMBER_PROFILE WHERE MEMBER_NO = A.MEMBER_NO AND DELETED_AT = 'N') AS MULTI_PROFILE_CNT
			<if test="@com.dentner.core.util.MybatisUtils@equals('A',memberSe)">
				, (SELECT IFNULL(SUM(MILEAGE_AMOUNT),0) AS MILEAGE_AMOUNT FROM T_MILEAGE D WHERE D.DELETED_AT = 'N' AND D.REGISTER_NO = A.MEMBER_NO) AS MEMBER_MILEAGE
			</if>
			<if test="@com.dentner.core.util.MybatisUtils@isNotEquals('A',memberSe)">
				, ( SELECT IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN ABS(MILEAGE_AMOUNT) ELSE 0 END) - IFNULL(SUM(CASE WHEN U.MILEAGE_UNIT = 'A' THEN R.TOTAL_REFUND_AMOUNT
					ELSE 0 END), 0), 0) AS mileageWon
					FROM T_MILEAGE U
					JOIN T_REQUEST_FORM Y ON U.REQUEST_FORM_NO = Y.REQUEST_FORM_NO
					JOIN T_MEMBER X ON Y.REQUEST_DESIGNER_NO = X.MEMBER_NO
					LEFT JOIN Refund R ON U.REQUEST_FORM_NO = R.REQUEST_FORM_NO
					WHERE U.MILEAGE_SE IN ('B', 'D')
					AND X.MEMBER_NO = A.MEMBER_NO
					AND U.CALCULATE_SE = 'N'
					AND Y.REQUEST_STATUS IN ('D', 'E')) AS MEMBER_MILEAGE
			</if>
		FROM T_MEMBER A
		JOIN T_MEMBER_PROFILE B ON A.MEMBER_NO = B.MEMBER_NO AND B.MEMBER_SE = #{memberSe}
		LEFT JOIN T_MEMBER_SW C ON A.MEMBER_NO  = C.MEMBER_NO
		WHERE 1=1
		  AND A.MEMBER_NO = #{memberNo}
		  AND A.DELETED_AT = 'N'
	</select>

	<select id="selectMemberSe" resultType="String">
		SELECT
			CASE WHEN COUNT(*) = 1 THEN MAX(A.MEMBER_SE) ELSE 'B' END AS MEMBER_SE
		FROM T_MEMBER A
		WHERE 1=1
		  AND A.MEMBER_EMAIL = #{memberEmail}
		  AND A.DELETED_AT = 'N';
	</select>


	<select id="selectUserInfoAdmin" parameterType="String" resultType="com.dentner.core.cmmn.vo.MemberVo">
		SELECT
			A.MEMBER_NO, A.MEMBER_SE, A.MEMBER_EMAIL, A.MEMBER_PASSWORD, A.MEMBER_TP, A.MEMBER_NAME,
			A.MEMBER_HP_NATION, A.MEMBER_HP, A.MEMBER_LICENSE_NUMBER, A.MEMBER_DENTISTRY_NAME,
			A.MEMBER_BUSINESS_NUMBER, A.MEMBER_ADDRESS, A.MEMBER_DETAIL_ADDRESS, A.MEMBER_FIRST_NAME,
			A.MEMBER_LAST_NAME, A.MEMBER_ALARM_AT, A.MEMBER_ALARM_SE, A.MEMBER_BUSINESS_NAME, A.MEMBER_JOB_SE,
			A.MEMBER_TIMEZONE_NO, A.MEMBER_APPROVAL_SE, A.LAST_LOGIN_DT
		FROM T_MEMBER A
		WHERE 1=1
		  AND A.MEMBER_EMAIL = #{memberEmail}
		  AND A.DELETED_AT = 'N'
	</select>

	<update id="updateLastLoginDt">
		UPDATE T_MEMBER
		SET LAST_LOGIN_DT = NOW()
		WHERE MEMBER_NO = #{memberNo}

	</update>
	
	<insert id="insertFcmToken" parameterType="com.dentner.core.cmmn.vo.MemberVo">
		INSERT INTO T_DEVICE
		(
			MEMBER_NO, DEVICE_TOKEN
		) VALUES (
		#{memberNo}, #{fcmToken}
		)  ON DUPLICATE KEY
		UPDATE
		DEVICE_TOKEN = #{fcmToken}
	</insert>
</mapper>